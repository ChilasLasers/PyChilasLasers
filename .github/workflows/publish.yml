name: Publish release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

env:
  PACKAGE_NAME: "pychilaslasers"

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      toml_version: ${{ steps.release.outputs.toml_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      # - name: Exit if not on master branch
      #   if: endsWith(github.ref, 'main') == false
      #   run: exit -1

      - name: setup-uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Extract tag and Details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo "$TAG_NAME" | awk -F'-' '{gsub(/^v/, "", $1); print $1}')
            SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
            TOML_VERSION=$(uv version --short)
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "toml_version=$TOML_VERSION" >> "$GITHUB_OUTPUT"
            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
            echo "Tag name is $TAG_NAME"
            echo "Toml version is $TOML_VERSION"
          else
            echo "No tag found"
            exit 1
          fi

  check_versions:
    needs: details
    runs-on: ubuntu-latest    
    permissions:
      contents: write  
    steps:
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions with PyPI and pyproject.toml and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          TOML_VERSION=${{ needs.details.outputs.toml_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" "$TOML_VERSION"| sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI or version in pyproject.tmol file $TOML_VERSION"
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI and pyproject.toml file $TOML_VERSION."
          fi

      - name: setup-uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get Branch
        run: |
          branch=$(git branch -r --contains ${{ github.ref }} --format "%(refname:lstrip=3)")
          echo $branch

      - name: update pyproject.toml
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          TOML_VERSION=${{ needs.details.outputs.toml_version }}
          echo "toml_version $TOML_VERSION"
          echo "new version $NEW_VERSION"
          if [ "$TOML_VERSION" != "$NEW_VERSION" ];then
            uv version $NEW_VERSION
            if ! git diff --quiet pyproject.toml; then
              git config user.name "github-actions[bot]"
              git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
              git push --delete origin v$NEW_VERSION
              git fetch
              git add pyproject.toml
              git commit -m "chore: bump version to v$NEW_VERSION [skip ci]"
              branch=$(git branch -r --contains ${{ github.ref }} --format "%(refname:lstrip=3)")
              git push origin HEAD:$branch
              git tag v$NEW_VERSION
              git push origin HEAD:v$NEW_VERSION
            else
              echo "pyproject.toml not changed after uv version (already up-to-date)"
            fi
          else
            echo "No version bump needed ($TOML_VERSION == $NEW_VERSION)"
          fi

  build_and_publish:
    needs: [details, check_versions]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: setup-uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: some information
        run: |
          echo $(git status)
          cat pyproject.tmol

      - name: Build source and wheel distribution
        run: uv build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        run: uv publish

  github_release:
    name: Create GitHub Release
    needs: [build_and_publish, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.details.outputs.tag_name }} dist/* --title ${{ needs.details.outputs.tag_name }} --generate-notes
